// include libraries
#include <AFMotor.h>
#include <NewPing.h>
#include <Servo.h> 


// sonar sensor 
#define TRIG_PIN A0 
#define ECHO_PIN A1 
#define MAX_DISTANCE 200

#define MAX_SPEED_OFFSET 20
#define MAX_SPEED 190 // sets speed of DC  motors


int speedSet = 0;

boolean goesForward=false;

// get sonar sensor new ping
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE); 

// create variable
long duration, cm, inches;
AF_DCMotor motor3(3, MOTOR34_64KHZ); 
AF_DCMotor motor4(4, MOTOR34_64KHZ); // 34 64
AF_DCMotor motor1(1, MOTOR34_64KHZ);
AF_DCMotor motor2(2, MOTOR34_64KHZ);
bool recv = false;
Servo myservo;   


int distance = 100;

void setup() {
  //Serial Port begin
  Serial.begin (9600);
  Serial1.begin (9600);
  
  // set motors speed
  motor1.setSpeed(200);
  motor2.setSpeed(200);
  motor3.setSpeed(200);
  motor4.setSpeed(200);

 
  // turn servo to 115 degree
  myservo.attach(10);  
  myservo.write(115); 
  delay(2000);
  
  // store servo receive ping 
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
}
void loop() {

// get input from MIT App Inventor
if (Serial1.available() >= 0){
  int movement = Serial1.read();
  Serial.print(movement);
  
  // create switch case
  switch (movement){
   case 49: // move forward
   while(true){
    motor1.run(FORWARD); 
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(FORWARD);
    movement = Serial1.read();
    if(movement == 54){
      break;  
    }
    }
    break;
   case 50: // move backward
   while(true){
    motor1.run(BACKWARD);
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(BACKWARD);
    movement = Serial1.read();
    if(movement == 54){
      break;  
    }
   }
    break;
   case 51: // turn left
   while(true){
    motor3.run(BACKWARD);     
    motor4.run(FORWARD);  
    motor1.run(FORWARD);  
    motor2.run(BACKWARD);
    movement = Serial1.read();
    if(movement == 54){
      break;  
    }
   }
    break;
   case 52: // turn right
   while(true){
    motor3.run(FORWARD);     
    motor4.run(BACKWARD);  
    motor1.run(BACKWARD);  
    motor2.run(FORWARD);
    movement = Serial1.read();
    if(movement == 54){
      break;  
    }
   }
    break;
  case 53: // Auto pilot
    moveForward();
   while(true){
    int distanceR = 0;
    int distanceL =  0;
    
    delay(40);
   
    // auto pilot decision to avoid crashing into objects
    if(distance<=50){
      moveStop();
      delay(100);
      moveBackward();
      delay(300);
      moveStop();
      delay(200);
      distanceR = lookRight();
      delay(200);
      distanceL = lookLeft();
      delay(200);
      
      // decision to turn left or right
      if(distanceR>=distanceL){
        turnRight();
        moveStop();
      }else{
        turnLeft();
        moveStop();
      }
    }else {
      moveForward();
    }
    distance = readPing();
    movement = Serial1.read();
    if(movement == 54){
      break;  
    }
    }
    break;
  case 54: // stop movement
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
    motor4.run(RELEASE);
    break;
  default:
    moveStop();
    break;
  }
}
// switch case
// case 1
//    move forward (hold)
// case 2
//    move backward (hold)
// case 3
//    turn left (hold)
// case 4
//    turn right (hold)
// case 5
//    auto (click)
// case 6 
//    turn off auto (click)
  
  
}

  // sonar sensor reading received ping
 int readPing() { 
  delay(70);
  int cm = sonar.ping_cm();
  if(cm==0){
    cm = 250;
  }
  return cm;
}

// servo turn 50 degree so sonar sensor can determine distance of object
int lookRight(){
    myservo.write(50); 
    delay(500);
    int distance = readPing();
    delay(100);
    myservo.write(115); 
    return distance;
}

// servo turn 170 degree and allow sonar sensor to determine object
int lookLeft(){  
  myservo.write(170); 
  delay(500);
  int distance = readPing();
  delay(100);
  myservo.write(115); 
  return distance;
  delay(100);
}

// stop all motors
void moveStop() {  
  motor1.run(RELEASE); 
  motor2.run(RELEASE);
  motor3.run(RELEASE); 
  motor4.run(RELEASE);
  } 
  
void moveForward() {

// move all motor forward
 if(!goesForward)
  {
    goesForward=true;
    motor1.run(FORWARD);      
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(FORWARD);  
      
    for (speedSet = 0; speedSet < MAX_SPEED; speedSet +=2) // slowly bring the speed up to avoid loading down the batteries too quickly
    {
      motor1.setSpeed(speedSet);
      motor2.setSpeed(speedSet);
      motor3.setSpeed(speedSet);
      motor4.setSpeed(speedSet);
      delay(5);
    }
  }
}

// move all motor backward
void moveBackward() {  
  goesForward=false;
  motor1.run(BACKWARD);      
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD); 
  for (speedSet = 0; speedSet < MAX_SPEED; speedSet +=2) // slowly bring the speed up to avoid loading down the batteries too quickly
  {
    motor1.setSpeed(speedSet);
    motor2.setSpeed(speedSet);
    motor3.setSpeed(speedSet);
    motor4.setSpeed(speedSet);
    delay(5);
  }
}  

// turn the car to the right
// two motor move forward 
// two motor move backward will turn car
void turnRight() {
  motor1.run(BACKWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD); 
  motor4.run(BACKWARD);    
  delay(500);
  motor1.run(FORWARD);      
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);    
} 
 
 // turn the car to the left
// two motor move forward 
// two motor move backward will turn car
void turnLeft() {
  motor3.run(BACKWARD);     
  motor4.run(FORWARD);  
  motor1.run(FORWARD);  
  motor2.run(BACKWARD);   
  delay(500);
  motor1.run(FORWARD);     
  motor2.run(FORWARD);
  motor3.run(FORWARD);     
  motor4.run(FORWARD);
}  
